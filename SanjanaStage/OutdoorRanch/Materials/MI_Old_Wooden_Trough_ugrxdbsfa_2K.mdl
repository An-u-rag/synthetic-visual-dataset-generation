mdl 1.6;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
import ::scene::*;
using .::OmniUe4Function import *;
using .::OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material MI_Old_Wooden_Trough_ugrxdbsfa_2K(
	uniform texture_2d Normal = texture_2d("./Textures/Placeholder_Normal.png",::tex::gamma_linear)
	[[
		anno::display_name("Normal"),
		anno::ui_order(3),
		anno::in_group("07 - Texture Maps"),
		sampler_normal()
	]],
	float NormalStrength = 1.0
	[[
		anno::display_name("Normal Strength"),
		anno::ui_order(32),
		anno::in_group("05 - Normal")
	]],
	uniform texture_2d Albedo = texture_2d("./Textures/DefaultDiffuse.png",::tex::gamma_srgb)
	[[
		anno::display_name("Albedo"),
		anno::in_group("07 - Texture Maps"),
		sampler_color()
	]],
	float4 AlbedoControls = float4(1.0,1.0,1.0,0.0)
	[[
		anno::display_name("Albedo Controls"),
		anno::ui_order(32),
		anno::in_group("01 - Albedo")
	]],
	float4 AlbedoTint = float4(1.0,1.0,1.0,1.0)
	[[
		anno::display_name("Albedo Tint"),
		anno::ui_order(1),
		anno::in_group("01 - Albedo")
	]],
	float4 MetallicControls = float4(1.0,0.0,1.0,1.0)
	[[
		anno::display_name("Metallic Controls"),
		anno::ui_order(32),
		anno::in_group("02 - Metallic")
	]],
	uniform texture_2d Metalness = texture_2d("./Textures/BlackPlaceholder.png",::tex::gamma_linear)
	[[
		anno::display_name("Metalness"),
		anno::ui_order(1),
		anno::in_group("07 - Texture Maps"),
		sampler_color()
	]],
	float BaseSpecular = 0.5
	[[
		anno::display_name("Base Specular"),
		anno::ui_order(1),
		anno::in_group("03 - Specular")
	]],
	float4 Specular_Desaturation = float4(0.5,0.5,0.5,1.0)
	[[
		anno::display_name("Specular - Desaturation"),
		anno::ui_order(2),
		anno::in_group("03 - Specular")
	]],
	float SpecularFromAlbedoOverride = 0.0
	[[
		anno::display_name("Specular From Albedo Override"),
		anno::ui_order(32),
		anno::in_group("03 - Specular")
	]],
	float MinRoughness = 0.0
	[[
		anno::display_name("Min Roughness"),
		anno::ui_order(32),
		anno::in_group("04 - Roughness")
	]],
	float MaxRoughness = 1.0
	[[
		anno::display_name("Max Roughness"),
		anno::ui_order(1),
		anno::in_group("04 - Roughness")
	]],
	uniform texture_2d DR = texture_2d("./Textures/WhitePlaceholder.png",::tex::gamma_linear)
	[[
		anno::display_name("DR"),
		anno::description("DR"),
		anno::ui_order(32),
		sampler_color()
	]],
	int MaxTexCoordIndex = 3
	[[
		anno::hidden()
	]])
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(math::min(0,MaxTexCoordIndex)).x,1.0-state::texture_coordinate(math::min(0,MaxTexCoordIndex)).y);

	float4 Local0 = ::unpack_normal_map(tex::lookup_float4(Normal,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat));
	float2 Local1 = (float2(float3(Local0.x,Local0.y,Local0.z).x,float3(Local0.x,Local0.y,Local0.z).y) * NormalStrength);

	float3 Normal_mdl = float3(Local1.x,Local1.y,float3(Local0.x,Local0.y,Local0.z).z);

	float4 Local2 = tex::lookup_float4(Albedo,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local3 = math::dot(float3(Local2.x,Local2.y,Local2.z), float3(0.3,0.59,0.11));
	float Local4 = (1.0 - AlbedoControls.x);
	float3 Local5 = math::lerp(float3(Local2.x,Local2.y,Local2.z),float3(Local3,Local3,Local3),Local4);
	float3 Local6 = (Local5 * AlbedoControls.y);
	float3 Local7 = (Local6 * float3(AlbedoTint.x,AlbedoTint.y,AlbedoTint.z));
	float3 Local8 = math::pow(math::max(Local7,float3(0.000001)),float3(AlbedoControls.z,AlbedoControls.z,AlbedoControls.z));
	float4 Local9 = tex::lookup_float4(Metalness,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local10 = (Local9.x * MetallicControls.z);
	float Local11 = math::round(MetallicControls.x);
	float Local12 = math::lerp(MetallicControls.y,Local10,Local11);
	float Local13 = math::dot(float3(Local2.x,Local2.y,Local2.z), float3(Specular_Desaturation.x,Specular_Desaturation.y,Specular_Desaturation.z));
	float Local14 = math::saturate(Local13);
	float Local15 = (Local14 * 0.5);
	float Local16 = math::lerp(BaseSpecular,Local15,SpecularFromAlbedoOverride);
	float4 Local17 = tex::lookup_float4(DR,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local18 = math::lerp(MinRoughness,MaxRoughness,Local17.y);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = 1.0;
	float3 BaseColor_mdl = Local8;
	float Metallic_mdl = Local12;
	float Specular_mdl = Local16;
	float Roughness_mdl = Local18;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
