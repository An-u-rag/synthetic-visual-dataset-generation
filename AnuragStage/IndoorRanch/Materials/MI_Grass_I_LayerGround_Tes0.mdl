mdl 1.6;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
import ::scene::*;
using .::OmniUe4Function import *;
using .::OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material MI_Grass_I_LayerGround_Tes0(
	uniform texture_2d WeightmapbaseGround_I = texture_2d("./Textures/WeightMapNullTexture.png",::tex::gamma_linear)
	[[
		anno::hidden(),
		sampler_masks()
	]],
	float Tiling_I = 0.005
	[[
		anno::display_name("Tiling_I"),
		anno::ui_order(32),
		anno::in_group("baseGround_I")
	]],
	uniform texture_2d Normal = texture_2d("./Textures/gl1_ground_I_normal.png",::tex::gamma_linear)
	[[
		anno::display_name("Normal"),
		anno::ui_order(32),
		sampler_normal()
	]],
	uniform texture_2d Albedo = texture_2d("./Textures/gl1_ground_I_albedo.png",::tex::gamma_srgb)
	[[
		anno::display_name("Albedo"),
		anno::ui_order(32),
		sampler_color()
	]],
	float Brightness_I = 1.0
	[[
		anno::display_name("Brightness_I"),
		anno::ui_order(32),
		anno::in_group("baseGround_I")
	]],
	float Roughness = 10.0
	[[
		anno::display_name("Roughness"),
		anno::ui_order(32)
	]],
	int MaxTexCoordIndex = 3
	[[
		anno::hidden()
	]])
 = 
	let {

	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(math::min(0,MaxTexCoordIndex)).x,1.0-state::texture_coordinate(math::min(0,MaxTexCoordIndex)).y);
	float2 CustomizedUV1_mdl = float2(state::texture_coordinate(math::min(1,MaxTexCoordIndex)).x,1.0-state::texture_coordinate(math::min(1,MaxTexCoordIndex)).y);

	float4 Local0 = tex::lookup_float4(WeightmapbaseGround_I,float2(CustomizedUV1_mdl.x,1.0-CustomizedUV1_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local1 = math::dot(Local0, float4(1.0,0.0,0.0,0.0));
	float2 Local4 = (float2((::convert_to_left_hand(state::transform_point(state::coordinate_internal,state::coordinate_world,state::position()), true)*state::meters_per_scene_unit()*100.0).x,(::convert_to_left_hand(state::transform_point(state::coordinate_internal,state::coordinate_world,state::position()), true)*state::meters_per_scene_unit()*100.0).y) * Tiling_I);
	float4 Local5 = ::unpack_normal_map(tex::lookup_float4(Normal,float2(Local4.x,1.0-Local4.y),tex::wrap_repeat,tex::wrap_repeat));
	float3 Local6 = (float3(Local5.x,Local5.y,Local5.z) * Local1);
	float3 Local7 = (0.0 + Local6);

	float3 Normal_mdl = Local7;

	float4 Local8 = tex::lookup_float4(Albedo,float2(Local4.x,1.0-Local4.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local9 = (float3(Local8.x,Local8.y,Local8.z) * Brightness_I);
	float3 Local10 = (Local9 * Local1);
	float3 Local11 = (0.0 + Local10);
	float Local12 = (Roughness * Local1);
	float Local13 = (0.0 + Local12);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = 1.0;
	float3 BaseColor_mdl = Local11;
	float Metallic_mdl = 0.0;
	float Specular_mdl = 0.5;
	float Roughness_mdl = Local13;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
